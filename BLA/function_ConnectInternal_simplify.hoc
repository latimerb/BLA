//By Pirate Henry 2011 and modified by Feng and Keyang 2014

/* obfunc LoadMatrix() { local nrow,ncol localobj mat,datafile		nrow = $2	ncol = $3	datafile = new File()	datafile.ropen($s1)	mat = new Matrix()	mat.scanf(datafile,nrow,ncol)	//print mat.nrow, mat.ncol	datafile.close()	return mat
}*/

/*objref InternalSynMatrix,InternalThrMatrix,InternalWgtMatrix,InternalDelMatrix
InternalSynMatrix = new Matrix()//InternalThrMatrix = new Matrix()InternalWgtMatrix = new Matrix()InternalDelMatrix = new Matrix()
InternalSynMatrix = LoadMatrix(FileLocationStr_InternalSynConns,TotalCellNum,TotalCellNum)
//InternalThrMatrix = LoadMatrix(FileLocationStr_InternalThrConns,TotalCellNum,TotalCellNum)
InternalWgtMatrix = LoadMatrix(FileLocationStr_InternalWgtConns,TotalCellNum,TotalCellNum)InternalDelMatrix = LoadMatrix(FileLocationStr_InternalDelConns,TotalCellNum,TotalCellNum)*/
objref InternalsynList,InternalncList,fih,rdmInternalsynList = new List()InternalncList = new List()//rdm = new Random()
proc ConnectInternal_EE() { local i,j,cellgid,inputid,synid,thr,wgt,del	{pc.barrier()}
	for j = 0,PP_size_matrix.x[0][1]-1 {
		//cellgid = CellList.o(j).mygid
		for i = 0,CellNum_p-1 {        	cellgid = E2E_syn_matrix.x[i][j]                  if (cellgid>=0) {                        if(!pc.gid_exists(cellgid)) { continue }
			//Rdm_D = rdm.discunif(1, 5)						// random number generator for different delay
			inputid = i
			//synid = InternalSynMatrix.x[inputid][cellgid]            synid = 1
			//print(synid)
			if (synid != 0) {
				//print(synid)
				//printf("The cell #%d gets input from Cell #%d with synid #%d!\n",cellgid,inputid,synid)
				//thr = InternalThrMatrix.x[inputid][cellgid]
				wgt = E2E_wgt_matrix.x[inputid][j]
				del = E2E_del_matrix.x[inputid][j]
				//printf("%f,%f,%f\n",thr,wgt,del)
				//if (del<dt) {
				//	print del
				//}               
				ConnectTwoCells(inputid,cellgid,synid,wgt,del,InternalsynList,InternalncList)
				//ConnectTwoCells(inputid,cellgid,synid,Rdm_D,InternalsynList,InternalncList)
			}
		}              }          }       
	{pc.barrier()}     saveM.close()   }   proc ConnectInternal_II() { local i,j,cellgid,inputid,synid,thr,wgt,del	{pc.barrier()}	for j = 0,II_size_matrix.x[0][1]-1 {		//cellgid = CellList.o(j).mygid		for i = 0,CellNum_interneuron-1 {        	cellgid = I2I_syn_matrix.x[i][j]                  if (cellgid>=0) {                        if(!pc.gid_exists(cellgid)) { continue }			//Rdm_D = rdm.discunif(1, 5)						// random number generator for different delay			inputid = i+CellNum_p			//synid = InternalSynMatrix.x[inputid][cellgid]            synid = 4			//print(synid)			if (synid != 0) {				//print(synid)				//printf("The cell #%d gets input from Cell #%d with synid #%d!\n",cellgid,inputid,synid)				//thr = InternalThrMatrix.x[inputid][cellgid]				wgt = I2I_wgt_matrix.x[i][j]				del = I2I_del_matrix.x[i][j]				//printf("%f,%f,%f\n",thr,wgt,del)				//if (del<dt) {				//	print del				//}               				ConnectTwoCells(inputid,cellgid,synid,wgt,del,InternalsynList,InternalncList)				//ConnectTwoCells(inputid,cellgid,synid,Rdm_D,InternalsynList,InternalncList)			}		}              }          }       	{pc.barrier()}     saveM.close()   }
   proc ConnectInternal_IP() { local i,j,cellgid,inputid,synid,thr,wgt,del	{pc.barrier()}	for j = 0,IP_size_matrix.x[0][1]-1 {		//cellgid = CellList.o(j).mygid		for i = 0,CellNum_interneuron-1 {        	cellgid = I2P_syn_matrix.x[i][j]                  if (cellgid>=0) {                        if(!pc.gid_exists(cellgid)) { continue }			//Rdm_D = rdm.discunif(1, 5)						// random number generator for different delay			inputid = i+CellNum_p			//synid = InternalSynMatrix.x[inputid][cellgid]            synid = 3			//print(synid)			if (synid != 0) {				//print(synid)				//printf("The cell #%d gets input from Cell #%d with synid #%d!\n",cellgid,inputid,synid)				//thr = InternalThrMatrix.x[inputid][cellgid]				wgt = I2P_wgt_matrix.x[i][j]				del = I2P_del_matrix.x[i][j]				//printf("%f,%f,%f\n",thr,wgt,del)				//if (del<dt) {				//	print del				//}               				ConnectTwoCells(inputid,cellgid,synid,wgt,del,InternalsynList,InternalncList)				//ConnectTwoCells(inputid,cellgid,synid,Rdm_D,InternalsynList,InternalncList)			}		}              }          }       	{pc.barrier()}     saveM.close()   }            proc ConnectInternal_PI_reversed() { local i,j,cellgid,inputid,synid,thr,wgt,del	{pc.barrier()}	for j = 0,CellNum_interneuron-1 { 		cellgid = j+CellNum_p		for i = 0,PI_size_matrix.x[0][1]-1 {        	inputid = P2I_syn_matrix_reversed.x[j][i]               if (inputid>=0) {                        if(!pc.gid_exists(cellgid)) { continue }			//Rdm_D = rdm.discunif(1, 5)						// random number generator for different delay						//synid = InternalSynMatrix.x[inputid][cellgid]            synid = 2			//print(synid)			if (synid != 0) {				//print(synid)				//printf("The cell #%d gets input from Cell #%d with synid #%d!\n",cellgid,inputid,synid)				//thr = InternalThrMatrix.x[inputid][cellgid]				wgt = P2I_wgt_matrix.x[j][i]				del = P2I_del_matrix.x[j][i]				//printf("%f,%f,%f\n",thr,wgt,del)				//if (del<dt) {				//	print del				//}               				ConnectTwoCells(inputid,cellgid,synid,wgt,del,InternalsynList,InternalncList)				//ConnectTwoCells(inputid,cellgid,synid,Rdm_D,InternalsynList,InternalncList)			}		}              }          }       	{pc.barrier()}     saveM.close()   }